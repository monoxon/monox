---
description: 
globs: 
alwaysApply: false
---
# MonoX 项目概览

## 项目简介
MonoX 是一个用 Rust 编写的轻量级 monorepo 构建工具，专门用于管理多包项目的依赖关系分析、构建任务编排和并发执行。支持 pnpm、npm、yarn 等主流包管理器，提供完整的国际化支持（中文/英文）。目前核心功能已基本完成，包括依赖分析、任务执行、用户界面和国际化系统。

## 核心配置文件
- **[Cargo.toml](mdc:Cargo.toml)** - Rust 项目配置，包含所有依赖和项目元信息
- **[monox.toml](mdc:monox.toml)** - MonoX 特定配置，定义工作区、任务、并发设置和国际化选项

## 项目架构

### 目录结构
```
monox/
├── src/
│   ├── main.rs              # 主入口点
│   ├── cli/                 # 命令行接口模块 ✅
│   │   ├── mod.rs          # CLI 主模块和参数解析
│   │   ├── analyze.rs      # 依赖分析命令 ✅
│   │   ├── check.rs        # 检查命令（版本冲突、循环依赖、过期包）✅
│   │   ├── exec.rs         # 执行预定义任务命令 ✅
│   │   ├── fix.rs          # 修复命令（版本不一致等）✅
│   │   ├── init.rs         # 初始化配置命令 ✅
│   │   ├── run.rs          # 运行指定命令 ✅
│   │   └── update.rs       # 更新依赖命令 ⏳
│   ├── core/               # 核心功能模块 ✅
│   │   ├── mod.rs          # 核心模块导出
│   │   ├── analyzer.rs     # 依赖关系分析器 ✅
│   │   ├── cache.rs        # 缓存管理 🔄
│   │   ├── executor.rs     # 任务执行器 ✅
│   │   └── scheduler.rs    # 异步任务调度器 ✅
│   ├── models/             # 数据模型 ✅
│   │   ├── mod.rs          # 模型模块导出
│   │   ├── config.rs       # 配置数据结构 ✅
│   │   └── package.rs      # 包信息数据结构 ✅
│   ├── utils/              # 工具函数 ✅
│   │   ├── mod.rs          # 工具模块导出
│   │   ├── colors.rs       # 颜色输出工具 ✅
│   │   ├── styles.rs       # 文本样式工具 ✅
│   │   ├── constants.rs    # 常量定义
│   │   ├── logger.rs       # 统一日志系统 ✅
│   │   ├── performance.rs  # 性能监控工具
│   │   └── spinner.rs      # 增强型进度显示组件 ✅
│   ├── i18n/               # 国际化支持 ✅
│   │   ├── mod.rs          # 国际化主模块 ✅
│   │   ├── zh_cn.rs        # 中文翻译 ✅
│   │   └── en_us.rs        # 英文翻译 ✅
│   └── ui/                 # 用户界面 ✅
│       ├── mod.rs          # UI 模块导出
│       ├── runner.rs       # 实时进度UI（刷新模式）✅
│       └── summary.rs      # 汇总显示组件 ✅
├── test-packages/          # 测试用的示例包
├── target/                 # Rust 构建输出目录
├── Cargo.toml             # Rust 项目配置
├── monox.toml             # MonoX 配置文件
├── README.md              # 项目说明和使用指南 ✅
├── TODOLIST.md            # 开发任务清单 ✅
└── package.json           # Node.js 兼容性配置
```

**状态说明**: ✅ 已完成, 🔄 进行中, ⏳ 待开始

## 核心功能模块

### CLI 命令系统 ✅ (已完成)
- **analyze** ✅ - 分析依赖关系并生成构建阶段，支持单包分析和多种输出格式
- **check** ✅ - 检查版本冲突、循环依赖、过期包，支持详细模式和健康报告
- **exec** ✅ - 执行预定义任务（从 monox.toml 读取），与 run 命令共享执行引擎
- **fix** ✅ - 修复版本不一致等问题，支持预演模式和用户确认
- **init** ✅ - 初始化 MonoX 配置文件，自动检测工作区和包管理器
- **run** ✅ - 运行指定命令（自动解析依赖），支持单包和全量执行
- **update** ⏳ - 更新包依赖到最新版本（规划中）

### 核心引擎 ✅ (已完成)
- **DependencyAnalyzer** ✅ - 依赖关系分析，构建有向无环图，支持循环检测和拓扑排序
- **TaskExecutor** ✅ - 任务执行器，支持异步并发执行、进度追踪、超时控制和错误处理
- **TaskScheduler** ✅ - 异步任务调度器，基于 tokio 的高性能调度系统
- **Cache** 🔄 - 缓存系统，提升重复操作性能（基础实现）

### 数据模型 ✅ (已完成)
- **Config** ✅ - 配置管理（工作区、任务、执行参数），支持 CLI 参数覆盖
- **Package** ✅ - 包信息模型（依赖、脚本、版本），完整的工作区依赖识别
- **Language** ✅ - 语言枚举（中文/英文），动态语言切换
- **PackageManager** ✅ - 包管理器枚举（pnpm/npm/yarn）

### 工具系统 ✅ (已完成)
- **Logger** ✅ - 统一日志系统，支持多级别和完整国际化
- **Colors** ✅ - 颜色输出工具，终端兼容性和主题支持
- **TextStyles** ✅ - 文本样式工具（粗体、斜体、下划线），与颜色系统职责分离
- **Spinner** ✅ - 增强型进度显示组件，支持前缀/后缀消息和动态更新
- **PerformanceMonitor** 🔄 - 性能监控和优化工具

### 用户界面 ✅ (已完成)
- **TaskRunner UI** ✅ - 实时进度显示，支持动态刷新、Spinner 动画和多包状态追踪
- **Summary Display** ✅ - 统一汇总显示，支持国际化和格式化输出
- **Verbose Mode** ✅ - 详细输出模式，完整日志和调试信息
- **Progress Tracking** ✅ - 完成后保留满进度条，统一 [MONOX] 前缀显示

## 技术特性

### 依赖管理 ✅ (已完成)
- 自动检测工作区包结构
- 智能依赖关系分析，支持单包和全量分析
- 循环依赖检测和详细路径报告
- 版本冲突检测和自动修复
- 过期依赖扫描和更新建议

### 任务执行 ✅ (已完成)
- 基于依赖关系的智能调度
- 可配置的异步并发执行
- 实时进度追踪和状态显示
- 失败重试机制和错误恢复
- 超时控制和资源管理
- 任务状态生命周期管理

### 用户体验 ✅ (已完成)
- **双模式UI**: 刷新模式（实时更新）和详细模式（完整日志）
- **智能进度显示**: 动态 Spinner、进度条、完成状态保留
- **统一前缀**: 所有输出统一 [MONOX] 前缀
- **错误友好**: 国际化错误消息和用户友好提示

### 包管理器支持 🔄 (基础完成)
- **pnpm** ✅ - 默认推荐，性能最佳
- **npm** 🔄 - 基础兼容，待完善
- **yarn** 🔄 - 计划支持

### 国际化 ✅ (完全实现)
- 完整的中文/英文双语支持
- 动态语言切换（CLI 参数、配置文件）
- 所有用户界面文本国际化
- 错误消息和帮助文档本地化
- 数字和时间格式本地化

### 性能优化 🔄 (基础完成)
- 异步任务执行（基于 tokio）
- 智能并发控制和资源管理
- 内存使用优化
- 启动性能优化（待完善）
- 操作性能监控（基础实现）

### 架构设计 ✅ (已完成)
- **模块化**: 清晰的模块边界和职责分离
- **类型安全**: 充分利用 Rust 类型系统
- **异步优先**: 基于 tokio 的高性能异步运行时
- **错误处理**: 统一的错误处理和恢复策略
- **可扩展性**: 插件化架构设计基础

## 配置说明

### monox.toml 配置结构
```toml
[workspace]
root = "."                    # 工作区根目录
package_manager = "pnpm"      # 包管理器选择
ignore = ["dist", "build"]    # 排除扫描目录

[[tasks]]                     # 预定义任务
name = "build-all"
pkg_name = "*"               # * 表示所有包
command = "build"
desc = "构建所有包"

[execution]                   # 执行配置
max_concurrency = 10         # 最大并发数
task_timeout = 300           # 任务超时（秒）
retry_count = 0              # 重试次数
continue_on_failure = false  # 失败时是否继续

[output]                      # 输出配置
show_progress = true         # 显示进度
verbose = false              # 详细模式
colored = true               # 彩色输出

[i18n]                        # 国际化配置
language = "zh_cn"           # 界面语言 (zh_cn | en_us)
```

## 开发状态

### 核心功能完成度
- **依赖分析**: 100% ✅ (完整实现)
- **任务执行**: 100% ✅ (完整实现)
- **用户界面**: 100% ✅ (完整实现)
- **国际化**: 100% ✅ (完整实现)
- **CLI命令**: 95% ✅ (仅缺 update 命令)
- **配置管理**: 100% ✅ (完整实现)
- **错误处理**: 90% ✅ (基本完成)
- **测试覆盖**: 20% 🔄 (进行中)
- **性能优化**: 70% 🔄 (基础完成)

### 下一步开发重点
1. **测试体系** - 单元测试、集成测试、端到端测试
2. **性能优化** - 启动性能、缓存优化、监控完善
3. **高级功能** - 插件系统、监控可观测性
4. **生态集成** - CI/CD 集成、IDE 扩展

## 开发指南

### 代码组织原则
- **模块化设计** ✅ - 每个功能独立模块，清晰边界
- **错误处理** ✅ - 使用 `anyhow` 和 `thiserror` 统一错误处理
- **异步支持** ✅ - 基于 `tokio` 的异步运行时
- **类型安全** ✅ - 充分利用 Rust 类型系统
- **国际化优先** ✅ - 所有用户可见文本都支持国际化

### 扩展指南
- **新增命令** - 在 `src/cli/` 下添加新模块
- **新增功能** - 在 `src/core/` 下扩展核心功能
- **新增语言** - 在 `src/i18n/` 下添加翻译文件
- **新增工具** - 在 `src/utils/` 下添加工具函数
- **新增UI组件** - 在 `src/ui/` 下添加界面组件

### 测试策略
- 使用 `test-packages/` 目录进行集成测试
- 单元测试覆盖核心算法
- 端到端测试验证完整工作流
- 性能基准测试和回归测试

### 贡献规范
- 遵循模块职责边界，不跨越模块编写业务逻辑
- 使用 `Logger + i18n` 规范进行所有输出
- 使用像素图标替代 emoji
- 文件删除需经开发者确认
- 不主动触发构建命令，使用 `cargo check` 验证代码
