#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

function getPlatformPackage() {
  const platform = os.platform();
  const arch = os.arch();
  
  const platformKey = `${platform} ${arch}`;
  const packageMap = {
    'darwin arm64': '@monoxon/darwin-arm64',
    'darwin x64': '@monoxon/darwin-x64',
    'linux arm64': '@monoxon/linux-arm64',
    'linux x64': '@monoxon/linux-x64'
  };

  return packageMap[platformKey];
}

function findBinary() {
  const packageName = getPlatformPackage();
  if (!packageName) {
    console.error(`Unsupported platform: ${os.platform()}-${os.arch()}`);
    process.exit(1);
  }

  try {
    // 尝试找到平台特定包中的二进制文件
    const binaryPath = require.resolve(`${packageName}/monox`);
    return binaryPath;
  } catch (error) {
    console.error(`monox: Failed to find binary package "${packageName}".`);
    console.error('This may be due to:');
    console.error('1. Optional dependencies were skipped (try installing without --no-optional)');
    console.error(`2. Package "${packageName}" is not available for your platform`);
    console.error('3. Installation was incomplete');
    process.exit(1);
  }
}

// 执行实际的二进制文件
const binaryPath = findBinary();
const child = spawn(binaryPath, process.argv.slice(2), {
  stdio: 'inherit',
  windowsHide: false
});

child.on('exit', (code, signal) => {
  if (signal) {
    process.kill(process.pid, signal);
  } else {
    process.exit(code || 0);
  }
});
