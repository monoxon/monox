[config]
default_to_workspace = false
min_version = "0.36.0"

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

# 基础任务

[tasks.setup]
description = "设置开发环境"
script = '''
echo "安装开发工具..."
chmod +x pre-release.sh
cargo install cargo-watch
cargo install cargo-edit
cargo install cargo-audit
echo "开发环境设置完成！"
'''

[tasks.update]
args = ["update"]
command = "cargo"
description = "更新依赖"

[tasks.dev]
dependencies = [
  "clean",
  "check-format",
  "lint",
  "test",
  "build",
]
description = "开发流程 - 清理、检查格式、测试和构建"

[tasks.watch]
args = ["watch", "-x", "check", "-x", "build", "-i", "examples/**/*", "-i", "docs/**/*"]
command = "cargo"
description = "监听变化并重新构建"
install_crate = "cargo-watch"

[tasks.release]
description = "发布"
script = "cd npm && pnpm run release"

[tasks.doc]
args = ["doc", "--open"]
command = "cargo"
description = "生成文档"

# 辅助任务

[tasks.clean]
args = ["clean"]
command = "cargo"
description = "清理构建产物"

[tasks.check]
args = ["check"]
command = "cargo"
dependencies = ["check-format", "clippy"]
description = "检查编译"

[tasks.check-format]
args = ["fmt", "--check"]
command = "cargo"
description = "检查代码格式"

[tasks.format]
args = ["fmt"]
command = "cargo"
description = "格式化代码"

[tasks.lint]
args = [
  "clippy",
  "--all-targets",
  "--all-features",
  "--",
  "-W",
  "clippy::complexity",
  "-W",
  "clippy::correctness",
  "-A",
  "dead_code",
  "-A",
  "unused_imports",
  "-A",
  "unused_variables",
]
command = "cargo"
description = "运行 clippy lints"

[tasks.test]
args = ["test"]
command = "cargo"
description = "运行测试"

[tasks.profile]
args = ["build", "--release", "--profile", "profiling"]
command = "cargo"
description = "性能分析构建"

[tasks.bench]
args = ["bench"]
command = "cargo"
description = "运行基准测试"

[tasks.audit]
args = ["audit"]
command = "cargo"
description = "安全审计"
install_crate = "cargo-audit"

[tasks.test-verbose]
args = ["test", "--", "--nocapture"]
command = "cargo"
description = "详细测试输出"

# Linux targets

[tasks.setup-linux-x86_64]
args = ["target", "add", "x86_64-unknown-linux-gnu"]
command = "rustup"
description = "Setup Linux x86_64 target"

[tasks.setup-linux-aarch64]
args = ["target", "add", "aarch64-unknown-linux-gnu"]
command = "rustup"
description = "Setup Linux aarch64 target"

[tasks.build-x86_64-unknown-linux-gnu]
dependencies = ["setup-linux-x86_64"]
description = "Build release version for x86_64-unknown-linux-gnu"
script = '''
cargo build --target x86_64-unknown-linux-gnu --release
cp target/x86_64-unknown-linux-gnu/release/monox npm/packages/linux-x64/monox
cp README.md npm/packages/linux-x64/README.md
cp README.zh.md npm/packages/linux-x64/README.zh.md
echo "✅ Copied binary to npm/packages/linux-x64/monox"
'''

[tasks.build-aarch64-unknown-linux-gnu]
dependencies = ["setup-linux-aarch64"]
description = "Build release version for aarch64-unknown-linux-gnu"
script = '''
cargo build --target aarch64-unknown-linux-gnu --release
cp target/aarch64-unknown-linux-gnu/release/monox npm/packages/linux-arm64/monox
cp README.md npm/packages/linux-arm64/README.md
cp README.zh.md npm/packages/linux-arm64/README.zh.md
echo "✅ Copied binary to npm/packages/linux-arm64/monox"
'''

# macOS targets

[tasks.setup-macos-x86_64]
args = ["target", "add", "x86_64-apple-darwin"]
command = "rustup"
description = "Setup macOS x86_64 target"

[tasks.setup-macos-aarch64]
args = ["target", "add", "aarch64-apple-darwin"]
command = "rustup"
description = "Setup macOS aarch64 target"

[tasks.build-x86_64-apple-darwin]
dependencies = ["setup-macos-x86_64"]
description = "Build release version for x86_64-apple-darwin"
script = '''
cargo build --target x86_64-apple-darwin --release
cp target/x86_64-apple-darwin/release/monox npm/packages/darwin-x64/monox
cp README.md npm/packages/darwin-x64/README.md
cp README.zh.md npm/packages/darwin-x64/README.zh.md
echo "✅ Copied binary to npm/packages/darwin-x64/monox"
'''

[tasks.build-aarch64-apple-darwin]
dependencies = ["setup-macos-aarch64"]
description = "Build release version for aarch64-apple-darwin"
script = '''
cargo build --target aarch64-apple-darwin --release
cp target/aarch64-apple-darwin/release/monox npm/packages/darwin-arm64/monox
cp README.md npm/packages/darwin-arm64/README.md
cp README.zh.md npm/packages/darwin-arm64/README.zh.md
cp target/aarch64-apple-darwin/release/monox npm/monox/monox
cp README.md npm/monox/README.md
cp README.zh.md npm/monox/README.zh.md
echo "✅ Copied binary to npm/packages/darwin-arm64/monox"
echo "✅ Copied binary to npm/monox/monox (default platform)"
'''

# Build release version for all targets

[tasks.build-macos]
args = ["Build release version for macOS"]
command = "echo"
dependencies = [
  "build-x86_64-apple-darwin",
  "build-aarch64-apple-darwin",
]
description = "Build release version for macOS"

[tasks.build-linux]
args = ["Build release version for Linux"]
command = "echo"
dependencies = [
  "build-x86_64-unknown-linux-gnu",
  "build-aarch64-unknown-linux-gnu",
]
description = "Build release version for Linux"

# Build all platforms

[tasks.build-all-platforms]
description = "Build release version for all platforms"
dependencies = [
  "build-macos",
  "build-linux",
]
