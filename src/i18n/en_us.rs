// ============================================================================
// MonoX - English Translation Table
// ============================================================================
//
// 文件: src/i18n/en_us.rs
// 职责: English translation content definition
// 边界:
//   - ✅ English translation strings definition
//   - ✅ Translation key-value pairs maintenance
//   - ❌ Should not contain translation logic
//   - ❌ Should not contain business logic
//   - ❌ Should not contain other language translations
//   - ❌ Should not contain dynamic translation generation
//
// ============================================================================

/// English translation table
pub const TRANSLATIONS: &[(&str, &str)] = &[
    // Analyzer related
    ("analyze.start", "Starting workspace dependency analysis..."),
    ("analyze.scanning_workspace", "Scanning workspace: {}"),
    ("analyze.found_packages", "Found {} packages"),
    (
        "analyze.skip_root_package",
        "Skipping root package.json: {}",
    ),
    (
        "analyze.skip_invalid_package",
        "Skipping invalid package.json: {}",
    ),
    (
        "analyze.circular_detected",
        "Circular dependencies detected, cannot calculate build stages",
    ),
    ("analyze.stage_info", "Stage {}: {} packages ({})"),
    (
        "analyze.completed",
        "Analysis completed in {}ms, {} stages total",
    ),
    (
        "analyze.circular_found",
        "Detected {} circular dependencies",
    ),
    ("analyze.circular_detail", "Circular dependency {}: {}"),
    (
        "analyze.circular_warning",
        "Warning: Circular dependencies detected, remaining packages: {}",
    ),
    // Single package analysis related
    ("analyze.single_package_start", "Starting single package analysis: {}"),
    ("analyze.single_package_found", "Found target package '{}': {}"),
    ("analyze.single_package_completed", "Single package analysis completed: {}, took {}ms"),
    // Check related
            ("check.issues_found", "Outdated dependencies found, please check details above"),
    ("check.all_good", "All checks passed, workspace is healthy"),
    ("check.circular.start", "Starting circular dependency check..."),
    ("check.circular.none_found", "No circular dependencies found"),
    ("check.circular.found", "Found {} circular dependencies"),
    ("check.circular.details", "Circular Dependency Details"),
    ("check.circular.cycle_header", "Cycle {}:"),
    ("check.circular.cycle_detail", "  {} {} depends on {}"),
    ("check.circular.cycle_simple", "  {}"),
    ("check.circular.suggestion", "Suggestion: Refactor code to eliminate circular dependencies, which may cause build issues"),
    ("check.versions.start", "Starting version conflict check..."),
    ("check.versions.not_implemented", "Version conflict check is not implemented yet"),
    ("check.versions.none_found", "No version conflicts found"),
    ("check.versions.found", "Found {} version conflicts"),
    ("check.versions.details", "Version Conflicts Details"),
    ("check.versions.processing_package", "Processing package file: {}"),
    ("check.versions.conflicts_found", "Found {} version conflicts"),
    ("check.versions.conflict_header", "Conflict {}: {}"),
    ("check.versions.usage_detail", "  {} uses {} (resolved to {}, {} type)"),
    ("check.versions.version_group", "  Version {}: {}"),
    ("check.versions.recommended", "  Recommended version: {}"),
    ("check.versions.suggestion", "Suggestion: Run monox fix to automatically resolve version conflicts, or manually unify dependency versions"),
    ("check.outdated.start", "Starting outdated dependency check..."),
    ("check.outdated.checking_package", "Checking package: {}"),
    ("check.outdated.fetching_version", "Fetching latest version for {}..."),
    ("check.outdated.npm_error", "Failed to get version for {}: {}"),
    ("check.outdated.npm_command_error", "Failed to execute npm command ({}): {}"),
    ("check.outdated.none_found", "No outdated dependencies found"),
            ("check.outdated.found", "Found {} outdated dependencies"),
        ("check.outdated.found_with_instances", "Found {} outdated packages ({} dependency instances)"),
    ("check.outdated.details", "Outdated Dependencies Details"),
    ("check.outdated.package_header", "Package {}:"),
    ("check.outdated.dep_detail", "  {} {} {} → {} ({} type)"),
    ("check.outdated.dep_simple", "  {} {} → {} (in {})"),
    ("check.outdated.suggestion_npm", "Suggestion: Run npm update or manually update dependency versions"),
    ("check.outdated.suggestion_pnpm", "Suggestion: Run pnpm update or manually update dependency versions"),
    ("check.outdated.suggestion_yarn", "Suggestion: Run yarn upgrade or manually update dependency versions"),
    ("check.outdated.checking_dependencies", "Checking versions for {} dependencies..."),
    ("check.outdated.progress", "Checked {}/{} dependencies"),
            ("check.outdated.progress_with_found", "Checked {}/{} dependencies, found {} outdated"),
        ("check.outdated.collected_dependencies", "Collected {} unique dependencies"),
        ("check.outdated.found_package_files", "Found {} package.json files"),
        ("check.outdated.skipping_path", "Skipping path: {}"),
        ("check.outdated.processing_package", "Processing package file: {}"),
        ("check.outdated.unique_dependencies_count", "Total {} dependencies after deduplication"),
        ("check.outdated.found_one", "Found outdated dependency: {} {} -> {} (in {})"),
        ("check.outdated.found_realtime", "Found outdated: [{}] {} → {}"),
        ("check.outdated.using_threads", "Using {} threads for concurrent checking"),
        ("check.outdated.dep_simple_single", "  {} {} → {}"),
        ("check.outdated.dep_simple_multiple", "  {} {} → {}"),
        ("check.outdated.dep_detail_simple", "  {} {} → {} ({})"),
        ("check.outdated.found_prefix", "Found outdated:"),
    // Error messages
    (
        "error.no_packages_found",
        "No valid package.json files found in workspace",
    ),
    ("error.read_package_json", "Failed to read package.json: {}"),
    (
        "error.parse_package_json",
        "Failed to parse package.json: {}",
    ),
    ("error.get_package_dir", "Cannot get package directory"),
    ("error.walk_directory", "Failed to walk directory"),
    (
        "error.workspace_not_exist",
        "Workspace path does not exist: {}",
    ),
    ("error.package_not_found", "Package not found: {}"),
    // CLI related
    (
        "cli.analyze.start",
        "Starting workspace dependency analysis...",
    ),
    ("cli.check.start", "Starting workspace health check..."),
    ("cli.fix.start", "Starting version conflict fixes..."),
    // Fix related
    ("fix.no_packages_found", "No package.json files found"),
    ("fix.no_conflicts_found", "No version conflicts found"),
    ("fix.conflicts_found", "Found {} version conflicts"),
    ("fix.no_fixes_needed", "No fixes needed"),
    ("fix.skipping_path", "Skipping path: {}"),
    ("fix.found_package_files", "Found {} package.json files"),
    ("fix.plan_details", "Fix Plan Details"),
    ("fix.fix_detail", "Fix {}: {} in {}, {} {} → {} ({} type)"),
    ("fix.package_header", "Package {}:"),
    ("fix.fix_simple", "  {} {} → {}"),
    ("fix.total_fixes", "Total {} fix operations"),
    ("fix.dry_run_complete", "Dry run complete, no actual fixes executed"),
    ("fix.confirm_prompt", "Confirm fix operations? (y/N)"),
    ("fix.cancelled", "Fix operations cancelled"),
    ("fix.processing_package", "Processing package: {}"),
    ("fix.updated_dependency", "Updated dependency: {} {} → {}"),
    ("fix.updated_package", "Updated package: {}"),
    ("fix.completed", "Fix completed, executed {} fix operations"),
    ("fix.results_details", "Fix Results Details"),
    ("fix.result_detail", "  {} {} → {}"),
    // Config related
    ("analyze.config_loaded", "Loaded config file: {}"),
    ("analyze.config_error", "Failed to load config file: {}"),
    (
        "analyze.no_config",
        "No config file found, using default settings",
    ),
    // Output format related
    ("output.analysis_result", "Analysis Result"),
    ("output.total_packages", "Total packages: {}"),
    ("output.total_stages", "Build stages: {}"),
    (
        "output.packages_with_deps",
        "Packages with workspace deps: {}",
    ),
    ("output.analysis_duration", "Analysis duration: {}ms"),
    ("output.circular_dependencies", "Circular Dependencies"),
    (
        "output.no_circular_dependencies",
        "No circular dependencies found",
    ),
    ("output.build_stages", "Build Stages"),
    ("output.stage_info", "Stage {} ({} packages):"),
    ("output.no_workspace_deps", "no workspace dependencies"),
    ("output.depends_on", "depends on: {}"),
    ("output.depends_on_count", "depends on {} packages:"),
    ("output.path", "Path: {}"),
    ("output.version", "Version: {}"),
    ("output.scripts", "Scripts: {}"),
    ("output.package_details", "Package Details"),
    ("output.all_dependencies", "All dependencies ({})"),
    ("output.scripts_detail", "Scripts:"),
    (
        "output.usage_tip",
        "Tip: Use --detail to show dependencies, --verbose for more details, --format json for JSON output",
    ),
    // Init related
    ("init.start", "Initializing MonoX configuration..."),
    ("init.config_exists", "Config file already exists: {}"),
    (
        "init.use_force_hint",
        "Use --force to overwrite existing config file",
    ),
    ("init.config_created", "Config file created: {}"),
    ("init.create_failed", "Failed to create config file: {}"),
    (
        "init.next_steps",
        "You can now edit the config file to suit your project needs",
    ),
    // Executor related
    ("executor.start", "Starting execution of {} stages with {} tasks, max concurrency: {}"),
    ("executor.stage_start", "Executing stage {} with {} tasks"),
    ("executor.stage_success", "Stage {} completed successfully, {} tasks finished in {:.2}s"),
    ("executor.stage_failed", "Stage {} failed, {} tasks failed: {}"),
    ("executor.threads_start", "Starting {} threads for concurrent execution"),
    ("executor.thread_failed", "Thread {} detected task failure, notifying other threads to stop"),
    ("executor.thread_crashed", "Thread {} crashed unexpectedly"),
    ("executor.task_start", "Starting task: {} - {}"),
    ("executor.task_success", "Task completed successfully: {} - {}, took {:.2}s"),
    ("executor.task_failed", "Task failed: {} - {}, took {:.2}s"),
    ("executor.task_stderr", "Error output: {}"),
    ("executor.command_run", "Running command: {} {}"),
    ("executor.command_failed", "Command execution failed: {}"),
    ("executor.command_stdout", "Standard output: {}"),
    ("executor.command_stderr", "Standard error: {}"),
    ("executor.script_not_found", "Script '{}' not found in package.json of package '{}'"),
    ("executor.summary_title", "Execution Summary"),
    ("executor.summary_stages", "Stages completed: {}/{}"),
    ("executor.summary_tasks", "Tasks successful: {}/{}"),
    ("executor.summary_duration", "Total duration: {:.2}s"),
    ("executor.summary_success", "All tasks executed successfully!"),
    ("executor.summary_failed", "Execution failed, {} tasks failed"),
    // Run command related
    ("run.start", "Starting script execution: {}"),
    ("run.scanning_all_packages", "Scanning scripts in all packages..."),
    ("run.filtering_packages", "Filtering specified {} packages..."),
    ("run.package_not_found", "Package not found: {}"),
    ("run.script_not_found", "Script '{}' not found in package {}"),
    ("run.no_executable_packages", "No packages contain script '{}'"),
    ("run.found_executable_packages", "Found {} packages containing script '{}'"),
    ("run.empty_script", "Script '{}' in package {} is empty"),
    ("run.no_valid_tasks", "No valid tasks to execute"),
    ("run.executing_tasks", "Starting execution of {} tasks"),
    ("run.executing_package", "Executing package: {}"),
    ("run.task_completed", "Package {} completed"),
    ("run.task_failed", "Package {} failed"),
    ("run.task_error", "Package {} error: {}"),
    ("run.stopping_on_failure", "Failure detected, stopping execution"),
    ("run.execution_failed", "Execution failed, {} tasks failed"),
    ("run.execution_summary", "Execution Summary"),
    ("run.summary_script", "Script: {}"),
    ("run.summary_success", "Success: {}"),
    ("run.summary_failed", "Failed: {}"),
    ("run.summary_total", "Total: {}"),
    ("run.failed_packages", "Failed packages:"),
    ("run.all_success", "All packages executed successfully!"),
    ("run.partial_success", "Some packages executed successfully"),
    ("run.completed", "Script execution completed"),
];
